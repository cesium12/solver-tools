# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_regex', [dirname(__file__)])
        except ImportError:
            import _regex
            return _regex
        if fp is not None:
            try:
                _mod = imp.load_module('_regex', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _regex = swig_import_helper()
    del swig_import_helper
else:
    import _regex
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _regex.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _regex.SwigPyIterator_value(self)
    def incr(self, n = 1): return _regex.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _regex.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _regex.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _regex.SwigPyIterator_equal(self, *args)
    def copy(self): return _regex.SwigPyIterator_copy(self)
    def next(self): return _regex.SwigPyIterator_next(self)
    def __next__(self): return _regex.SwigPyIterator___next__(self)
    def previous(self): return _regex.SwigPyIterator_previous(self)
    def advance(self, *args): return _regex.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _regex.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _regex.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _regex.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _regex.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _regex.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _regex.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _regex.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class wordlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wordlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wordlist, name)
    __repr__ = _swig_repr
    def iterator(self): return _regex.wordlist_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _regex.wordlist___nonzero__(self)
    def __bool__(self): return _regex.wordlist___bool__(self)
    def __len__(self): return _regex.wordlist___len__(self)
    def pop(self): return _regex.wordlist_pop(self)
    def __getslice__(self, *args): return _regex.wordlist___getslice__(self, *args)
    def __setslice__(self, *args): return _regex.wordlist___setslice__(self, *args)
    def __delslice__(self, *args): return _regex.wordlist___delslice__(self, *args)
    def __delitem__(self, *args): return _regex.wordlist___delitem__(self, *args)
    def __getitem__(self, *args): return _regex.wordlist___getitem__(self, *args)
    def __setitem__(self, *args): return _regex.wordlist___setitem__(self, *args)
    def append(self, *args): return _regex.wordlist_append(self, *args)
    def empty(self): return _regex.wordlist_empty(self)
    def size(self): return _regex.wordlist_size(self)
    def clear(self): return _regex.wordlist_clear(self)
    def swap(self, *args): return _regex.wordlist_swap(self, *args)
    def get_allocator(self): return _regex.wordlist_get_allocator(self)
    def begin(self): return _regex.wordlist_begin(self)
    def end(self): return _regex.wordlist_end(self)
    def rbegin(self): return _regex.wordlist_rbegin(self)
    def rend(self): return _regex.wordlist_rend(self)
    def pop_back(self): return _regex.wordlist_pop_back(self)
    def erase(self, *args): return _regex.wordlist_erase(self, *args)
    def __init__(self, *args): 
        this = _regex.new_wordlist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _regex.wordlist_push_back(self, *args)
    def front(self): return _regex.wordlist_front(self)
    def back(self): return _regex.wordlist_back(self)
    def assign(self, *args): return _regex.wordlist_assign(self, *args)
    def resize(self, *args): return _regex.wordlist_resize(self, *args)
    def insert(self, *args): return _regex.wordlist_insert(self, *args)
    def reserve(self, *args): return _regex.wordlist_reserve(self, *args)
    def capacity(self): return _regex.wordlist_capacity(self)
    __swig_destroy__ = _regex.delete_wordlist
    __del__ = lambda self : None;
wordlist_swigregister = _regex.wordlist_swigregister
wordlist_swigregister(wordlist)

class strlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strlist, name)
    __repr__ = _swig_repr
    def iterator(self): return _regex.strlist_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _regex.strlist___nonzero__(self)
    def __bool__(self): return _regex.strlist___bool__(self)
    def __len__(self): return _regex.strlist___len__(self)
    def pop(self): return _regex.strlist_pop(self)
    def __getslice__(self, *args): return _regex.strlist___getslice__(self, *args)
    def __setslice__(self, *args): return _regex.strlist___setslice__(self, *args)
    def __delslice__(self, *args): return _regex.strlist___delslice__(self, *args)
    def __delitem__(self, *args): return _regex.strlist___delitem__(self, *args)
    def __getitem__(self, *args): return _regex.strlist___getitem__(self, *args)
    def __setitem__(self, *args): return _regex.strlist___setitem__(self, *args)
    def append(self, *args): return _regex.strlist_append(self, *args)
    def empty(self): return _regex.strlist_empty(self)
    def size(self): return _regex.strlist_size(self)
    def clear(self): return _regex.strlist_clear(self)
    def swap(self, *args): return _regex.strlist_swap(self, *args)
    def get_allocator(self): return _regex.strlist_get_allocator(self)
    def begin(self): return _regex.strlist_begin(self)
    def end(self): return _regex.strlist_end(self)
    def rbegin(self): return _regex.strlist_rbegin(self)
    def rend(self): return _regex.strlist_rend(self)
    def pop_back(self): return _regex.strlist_pop_back(self)
    def erase(self, *args): return _regex.strlist_erase(self, *args)
    def __init__(self, *args): 
        this = _regex.new_strlist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _regex.strlist_push_back(self, *args)
    def front(self): return _regex.strlist_front(self)
    def back(self): return _regex.strlist_back(self)
    def assign(self, *args): return _regex.strlist_assign(self, *args)
    def resize(self, *args): return _regex.strlist_resize(self, *args)
    def insert(self, *args): return _regex.strlist_insert(self, *args)
    def reserve(self, *args): return _regex.strlist_reserve(self, *args)
    def capacity(self): return _regex.strlist_capacity(self)
    __swig_destroy__ = _regex.delete_strlist
    __del__ = lambda self : None;
strlist_swigregister = _regex.strlist_swigregister
strlist_swigregister(strlist)

class freqlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, freqlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, freqlist, name)
    __repr__ = _swig_repr
    def iterator(self): return _regex.freqlist_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _regex.freqlist___nonzero__(self)
    def __bool__(self): return _regex.freqlist___bool__(self)
    def __len__(self): return _regex.freqlist___len__(self)
    def pop(self): return _regex.freqlist_pop(self)
    def __getslice__(self, *args): return _regex.freqlist___getslice__(self, *args)
    def __setslice__(self, *args): return _regex.freqlist___setslice__(self, *args)
    def __delslice__(self, *args): return _regex.freqlist___delslice__(self, *args)
    def __delitem__(self, *args): return _regex.freqlist___delitem__(self, *args)
    def __getitem__(self, *args): return _regex.freqlist___getitem__(self, *args)
    def __setitem__(self, *args): return _regex.freqlist___setitem__(self, *args)
    def append(self, *args): return _regex.freqlist_append(self, *args)
    def empty(self): return _regex.freqlist_empty(self)
    def size(self): return _regex.freqlist_size(self)
    def clear(self): return _regex.freqlist_clear(self)
    def swap(self, *args): return _regex.freqlist_swap(self, *args)
    def get_allocator(self): return _regex.freqlist_get_allocator(self)
    def begin(self): return _regex.freqlist_begin(self)
    def end(self): return _regex.freqlist_end(self)
    def rbegin(self): return _regex.freqlist_rbegin(self)
    def rend(self): return _regex.freqlist_rend(self)
    def pop_back(self): return _regex.freqlist_pop_back(self)
    def erase(self, *args): return _regex.freqlist_erase(self, *args)
    def __init__(self, *args): 
        this = _regex.new_freqlist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _regex.freqlist_push_back(self, *args)
    def front(self): return _regex.freqlist_front(self)
    def back(self): return _regex.freqlist_back(self)
    def assign(self, *args): return _regex.freqlist_assign(self, *args)
    def resize(self, *args): return _regex.freqlist_resize(self, *args)
    def insert(self, *args): return _regex.freqlist_insert(self, *args)
    def reserve(self, *args): return _regex.freqlist_reserve(self, *args)
    def capacity(self): return _regex.freqlist_capacity(self)
    __swig_destroy__ = _regex.delete_freqlist
    __del__ = lambda self : None;
freqlist_swigregister = _regex.freqlist_swigregister
freqlist_swigregister(freqlist)

class WordFit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordFit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordFit, name)
    __repr__ = _swig_repr
    __swig_getmethods__["word"] = _regex.WordFit_word_get
    if _newclass:word = _swig_property(_regex.WordFit_word_get)
    __swig_setmethods__["freq"] = _regex.WordFit_freq_set
    __swig_getmethods__["freq"] = _regex.WordFit_freq_get
    if _newclass:freq = _swig_property(_regex.WordFit_freq_get, _regex.WordFit_freq_set)
    def __init__(self, *args): 
        this = _regex.new_WordFit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _regex.delete_WordFit
    __del__ = lambda self : None;
WordFit_swigregister = _regex.WordFit_swigregister
WordFit_swigregister(WordFit)

class wordfitvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wordfitvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wordfitvec, name)
    __repr__ = _swig_repr
    def iterator(self): return _regex.wordfitvec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _regex.wordfitvec___nonzero__(self)
    def __bool__(self): return _regex.wordfitvec___bool__(self)
    def __len__(self): return _regex.wordfitvec___len__(self)
    def pop(self): return _regex.wordfitvec_pop(self)
    def __getslice__(self, *args): return _regex.wordfitvec___getslice__(self, *args)
    def __setslice__(self, *args): return _regex.wordfitvec___setslice__(self, *args)
    def __delslice__(self, *args): return _regex.wordfitvec___delslice__(self, *args)
    def __delitem__(self, *args): return _regex.wordfitvec___delitem__(self, *args)
    def __getitem__(self, *args): return _regex.wordfitvec___getitem__(self, *args)
    def __setitem__(self, *args): return _regex.wordfitvec___setitem__(self, *args)
    def append(self, *args): return _regex.wordfitvec_append(self, *args)
    def empty(self): return _regex.wordfitvec_empty(self)
    def size(self): return _regex.wordfitvec_size(self)
    def clear(self): return _regex.wordfitvec_clear(self)
    def swap(self, *args): return _regex.wordfitvec_swap(self, *args)
    def get_allocator(self): return _regex.wordfitvec_get_allocator(self)
    def begin(self): return _regex.wordfitvec_begin(self)
    def end(self): return _regex.wordfitvec_end(self)
    def rbegin(self): return _regex.wordfitvec_rbegin(self)
    def rend(self): return _regex.wordfitvec_rend(self)
    def pop_back(self): return _regex.wordfitvec_pop_back(self)
    def erase(self, *args): return _regex.wordfitvec_erase(self, *args)
    def __init__(self, *args): 
        this = _regex.new_wordfitvec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _regex.wordfitvec_push_back(self, *args)
    def front(self): return _regex.wordfitvec_front(self)
    def back(self): return _regex.wordfitvec_back(self)
    def assign(self, *args): return _regex.wordfitvec_assign(self, *args)
    def resize(self, *args): return _regex.wordfitvec_resize(self, *args)
    def insert(self, *args): return _regex.wordfitvec_insert(self, *args)
    def reserve(self, *args): return _regex.wordfitvec_reserve(self, *args)
    def capacity(self): return _regex.wordfitvec_capacity(self)
    __swig_destroy__ = _regex.delete_wordfitvec
    __del__ = lambda self : None;
wordfitvec_swigregister = _regex.wordfitvec_swigregister
wordfitvec_swigregister(wordfitvec)


def regex_match_all(*args):
  return _regex.regex_match_all(*args)
regex_match_all = _regex.regex_match_all
class LangModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LangModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LangModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _regex.new_LangModel(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDict(self): return _regex.LangModel_getDict(self)
    def word_to_id(self, *args): return _regex.LangModel_word_to_id(self, *args)
    def id_to_word(self, *args): return _regex.LangModel_id_to_word(self, *args)
    def id_to_freq(self, *args): return _regex.LangModel_id_to_freq(self, *args)
    __swig_destroy__ = _regex.delete_LangModel
    __del__ = lambda self : None;
LangModel_swigregister = _regex.LangModel_swigregister
LangModel_swigregister(LangModel)


def foo(*args):
  return _regex.foo(*args)
foo = _regex.foo

def bar(*args):
  return _regex.bar(*args)
bar = _regex.bar


