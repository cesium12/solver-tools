# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _regex
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _regex.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _regex.PySwigIterator_value(*args)
    def incr(*args): return _regex.PySwigIterator_incr(*args)
    def decr(*args): return _regex.PySwigIterator_decr(*args)
    def distance(*args): return _regex.PySwigIterator_distance(*args)
    def equal(*args): return _regex.PySwigIterator_equal(*args)
    def copy(*args): return _regex.PySwigIterator_copy(*args)
    def next(*args): return _regex.PySwigIterator_next(*args)
    def previous(*args): return _regex.PySwigIterator_previous(*args)
    def advance(*args): return _regex.PySwigIterator_advance(*args)
    def __eq__(*args): return _regex.PySwigIterator___eq__(*args)
    def __ne__(*args): return _regex.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _regex.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _regex.PySwigIterator___isub__(*args)
    def __add__(*args): return _regex.PySwigIterator___add__(*args)
    def __sub__(*args): return _regex.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _regex.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class wordlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wordlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wordlist, name)
    __repr__ = _swig_repr
    def iterator(*args): return _regex.wordlist_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _regex.wordlist___nonzero__(*args)
    def __len__(*args): return _regex.wordlist___len__(*args)
    def pop(*args): return _regex.wordlist_pop(*args)
    def __getslice__(*args): return _regex.wordlist___getslice__(*args)
    def __setslice__(*args): return _regex.wordlist___setslice__(*args)
    def __delslice__(*args): return _regex.wordlist___delslice__(*args)
    def __delitem__(*args): return _regex.wordlist___delitem__(*args)
    def __getitem__(*args): return _regex.wordlist___getitem__(*args)
    def __setitem__(*args): return _regex.wordlist___setitem__(*args)
    def append(*args): return _regex.wordlist_append(*args)
    def empty(*args): return _regex.wordlist_empty(*args)
    def size(*args): return _regex.wordlist_size(*args)
    def clear(*args): return _regex.wordlist_clear(*args)
    def swap(*args): return _regex.wordlist_swap(*args)
    def get_allocator(*args): return _regex.wordlist_get_allocator(*args)
    def begin(*args): return _regex.wordlist_begin(*args)
    def end(*args): return _regex.wordlist_end(*args)
    def rbegin(*args): return _regex.wordlist_rbegin(*args)
    def rend(*args): return _regex.wordlist_rend(*args)
    def pop_back(*args): return _regex.wordlist_pop_back(*args)
    def erase(*args): return _regex.wordlist_erase(*args)
    def __init__(self, *args): 
        this = _regex.new_wordlist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _regex.wordlist_push_back(*args)
    def front(*args): return _regex.wordlist_front(*args)
    def back(*args): return _regex.wordlist_back(*args)
    def assign(*args): return _regex.wordlist_assign(*args)
    def resize(*args): return _regex.wordlist_resize(*args)
    def insert(*args): return _regex.wordlist_insert(*args)
    def reserve(*args): return _regex.wordlist_reserve(*args)
    def capacity(*args): return _regex.wordlist_capacity(*args)
    __swig_destroy__ = _regex.delete_wordlist
    __del__ = lambda self : None;
wordlist_swigregister = _regex.wordlist_swigregister
wordlist_swigregister(wordlist)

class WordFit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordFit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordFit, name)
    __repr__ = _swig_repr
    __swig_getmethods__["word"] = _regex.WordFit_word_get
    if _newclass:word = _swig_property(_regex.WordFit_word_get)
    __swig_setmethods__["freq"] = _regex.WordFit_freq_set
    __swig_getmethods__["freq"] = _regex.WordFit_freq_get
    if _newclass:freq = _swig_property(_regex.WordFit_freq_get, _regex.WordFit_freq_set)
    def __init__(self, *args): 
        this = _regex.new_WordFit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _regex.delete_WordFit
    __del__ = lambda self : None;
WordFit_swigregister = _regex.WordFit_swigregister
WordFit_swigregister(WordFit)

regex_match_all = _regex.regex_match_all
class LangModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LangModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LangModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _regex.new_LangModel(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDict(*args): return _regex.LangModel_getDict(*args)
    def word_to_id(*args): return _regex.LangModel_word_to_id(*args)
    def id_to_word(*args): return _regex.LangModel_id_to_word(*args)
    def id_to_freq(*args): return _regex.LangModel_id_to_freq(*args)
    __swig_destroy__ = _regex.delete_LangModel
    __del__ = lambda self : None;
LangModel_swigregister = _regex.LangModel_swigregister
LangModel_swigregister(LangModel)



