# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _regulus
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _regulus.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _regulus.PySwigIterator_value(*args)
    def incr(*args): return _regulus.PySwigIterator_incr(*args)
    def decr(*args): return _regulus.PySwigIterator_decr(*args)
    def distance(*args): return _regulus.PySwigIterator_distance(*args)
    def equal(*args): return _regulus.PySwigIterator_equal(*args)
    def copy(*args): return _regulus.PySwigIterator_copy(*args)
    def next(*args): return _regulus.PySwigIterator_next(*args)
    def previous(*args): return _regulus.PySwigIterator_previous(*args)
    def advance(*args): return _regulus.PySwigIterator_advance(*args)
    def __eq__(*args): return _regulus.PySwigIterator___eq__(*args)
    def __ne__(*args): return _regulus.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _regulus.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _regulus.PySwigIterator___isub__(*args)
    def __add__(*args): return _regulus.PySwigIterator___add__(*args)
    def __sub__(*args): return _regulus.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _regulus.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class dictvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dictvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dictvector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _regulus.dictvector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _regulus.dictvector___nonzero__(*args)
    def __len__(*args): return _regulus.dictvector___len__(*args)
    def pop(*args): return _regulus.dictvector_pop(*args)
    def __getslice__(*args): return _regulus.dictvector___getslice__(*args)
    def __setslice__(*args): return _regulus.dictvector___setslice__(*args)
    def __delslice__(*args): return _regulus.dictvector___delslice__(*args)
    def __delitem__(*args): return _regulus.dictvector___delitem__(*args)
    def __getitem__(*args): return _regulus.dictvector___getitem__(*args)
    def __setitem__(*args): return _regulus.dictvector___setitem__(*args)
    def append(*args): return _regulus.dictvector_append(*args)
    def empty(*args): return _regulus.dictvector_empty(*args)
    def size(*args): return _regulus.dictvector_size(*args)
    def clear(*args): return _regulus.dictvector_clear(*args)
    def swap(*args): return _regulus.dictvector_swap(*args)
    def get_allocator(*args): return _regulus.dictvector_get_allocator(*args)
    def begin(*args): return _regulus.dictvector_begin(*args)
    def end(*args): return _regulus.dictvector_end(*args)
    def rbegin(*args): return _regulus.dictvector_rbegin(*args)
    def rend(*args): return _regulus.dictvector_rend(*args)
    def pop_back(*args): return _regulus.dictvector_pop_back(*args)
    def erase(*args): return _regulus.dictvector_erase(*args)
    def __init__(self, *args): 
        this = _regulus.new_dictvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _regulus.dictvector_push_back(*args)
    def front(*args): return _regulus.dictvector_front(*args)
    def back(*args): return _regulus.dictvector_back(*args)
    def assign(*args): return _regulus.dictvector_assign(*args)
    def resize(*args): return _regulus.dictvector_resize(*args)
    def insert(*args): return _regulus.dictvector_insert(*args)
    def reserve(*args): return _regulus.dictvector_reserve(*args)
    def capacity(*args): return _regulus.dictvector_capacity(*args)
    __swig_destroy__ = _regulus.delete_dictvector
    __del__ = lambda self : None;
dictvector_swigregister = _regulus.dictvector_swigregister
dictvector_swigregister(dictvector)

class DictEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DictEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["word"] = _regulus.DictEntry_word_set
    __swig_getmethods__["word"] = _regulus.DictEntry_word_get
    if _newclass:word = _swig_property(_regulus.DictEntry_word_get, _regulus.DictEntry_word_set)
    __swig_setmethods__["freq"] = _regulus.DictEntry_freq_set
    __swig_getmethods__["freq"] = _regulus.DictEntry_freq_get
    if _newclass:freq = _swig_property(_regulus.DictEntry_freq_get, _regulus.DictEntry_freq_set)
    def __init__(self, *args): 
        this = _regulus.new_DictEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _regulus.delete_DictEntry
    __del__ = lambda self : None;
DictEntry_swigregister = _regulus.DictEntry_swigregister
DictEntry_swigregister(DictEntry)

class Dict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dict, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _regulus.new_Dict(*args)
        try: self.this.append(this)
        except: self.this = this
    def read(*args): return _regulus.Dict_read(*args)
    def write(*args): return _regulus.Dict_write(*args)
    def grep(*args): return _regulus.Dict_grep(*args)
    def grep_freq_sorted(*args): return _regulus.Dict_grep_freq_sorted(*args)
    def total_freq(*args): return _regulus.Dict_total_freq(*args)
    def best_match(*args): return _regulus.Dict_best_match(*args)
    __swig_destroy__ = _regulus.delete_Dict
    __del__ = lambda self : None;
Dict_swigregister = _regulus.Dict_swigregister
Dict_swigregister(Dict)



